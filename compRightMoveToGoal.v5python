{"mode":"Text","hardwareTarget":"brain","textContent":"\n# ------------------------------------------\n# \n# \tProject: compRightMoveToGoal\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 320, 40, MM, 1)\nconveyorMotors_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nconveyorMotors_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nconveyorMotors = MotorGroup(conveyorMotors_motor_a, conveyorMotors_motor_b)\nconveyorRotatorMotor = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nspinnyWheelMotors_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nspinnyWheelMotors_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)\nspinnyWheelMotors = MotorGroup(spinnyWheelMotors_motor_a, spinnyWheelMotors_motor_b)\nconveyorRotatorMotor.set_position(0,DEGREES)\n\n\n\n\n# Library imports\nfrom vex import *\n\ndef pre_autonomous():\n    pass\n\ndef autonomous():\n    conveyorRotatorMotor.spin_to_position(20,DEGREES)\n    drivetrain.drive_for(FORWARD,55,INCHES,wait=True)\n    drivetrain.turn_for(RIGHT,110,DEGREES,wait=True)\n    conveyorMotors.set_velocity(100,PERCENT)\n    conveyorMotors.spin(REVERSE)\n    drivetrain.drive_for(REVERSE,10,INCHES,wait=True)\n    wait(1,SECONDS)\n    conveyorMotors.stop()\n    spinnyWheelMotors.stop()\n    conveyorRotatorMotor.spin_to_position(60, DEGREES)\n    drivetrain.turn_for(LEFT, 220,DEGREES,wait = True)\n    left_drive_smart.set_velocity(100,PERCENT)\n    right_drive_smart.set_velocity(100,PERCENT)\n    drivetrain.drive_for(REVERSE,30,INCHES,wait=True)\n    drivetrain.drive_for(FORWARD,5,INCHES,wait=True)\n    drivetrain.drive_for(REVERSE,20,INCHES,wait=True)\n    drivetrain.drive_for(FORWARD,5,INCHES,wait=True)\n    drivetrain.drive_for(REVERSE,20,INCHES,wait=True)\n    \n\nconveyorAngle = conveyorRotatorMotor.position(DEGREES)\n\nwheelsSpinning = False;\nspinnyWheelMotors.set_velocity(70, PERCENT)\ndef controller1AButtonPressed():\n    global wheelsSpinning\n    if wheelsSpinning:\n        spinnyWheelMotors.stop()\n        conveyorMotors.stop()\n        wheelsSpinning = False\n    else:\n        #spinnyWheelMotors.set_velocity(60, PERCENT)\n        conveyorRotatorMotor.spin_to_position(30,DEGREES)\n        spinnyWheelMotors.spin(FORWARD)\n        wait(1, SECONDS)\n        conveyorMotors.spin(FORWARD)\n        \n        wheelsSpinning = True\ninverse = False\ndef controller_1YButtonPressed():\n    global inverse\n    inverse = not inverse\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\nmovingDown = True\nrotatorMotorMovingDown = False\nconveyorRotatorMotorStop = False\nconveyorVelocity = 75\n# define a task that will handle monitoring inputs from controller_1\ndef user_control():\n    # define variable for remote controller enable/disable\n    remote_control_code_enabled = True  \n    drivetrain.stop()\n    controller_1.buttonY.pressed(controller_1YButtonPressed)\n    controller_1.buttonA.pressed(controller1AButtonPressed)\n    conveyorRotatorMotor.set_velocity(40, PERCENT)\n    conveyorRotatorMotor.set_stopping(HOLD)\n    global drivetrain_l_needs_to_be_stopped_controller_1 \n    global drivetrain_r_needs_to_be_stopped_controller_1\n    global controller_1_left_shoulder_control_motors_stopped\n    global controller_1_right_shoulder_control_motors_stopped\n    global conveyorVelocity, conveyorAngle, conveyorRotatorMotorStop, rotatorMotorMovingDown, inverse\n    conveyorMotors.set_velocity(conveyorVelocity, PERCENT)\n    conveyorRotatorMotor.spin_to_position(20, DEGREES)\n    conveyorMotors.stop()\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis1\n            # right = axis3 - axis1\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                if inverse:\n                    drivetrain_left_side_speed = -drivetrain_left_side_speed\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                if not inverse:\n                    left_drive_smart.spin(FORWARD)\n                else:\n                    left_drive_smart.spin(REVERSE)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                if inverse:\n                    drivetrain_right_side_speed = -drivetrain_right_side_speed\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                if not inverse:\n                    right_drive_smart.spin(FORWARD)\n                else:\n                    right_drive_smart.spin(REVERSE)\n            # check the buttonL1/buttonL2 status\n            # to control conveyorMotors\n\n            if controller_1.buttonL2.pressing():\n                conveyorVelocity -= 1\n                conveyorMotors.set_velocity(conveyorVelocity, PERCENT)\n            elif controller_1.buttonR2.pressing():\n                conveyorVelocity += 1\n                conveyorMotors.set_velocity(conveyorVelocity, PERCENT)\n            if conveyorVelocity > 100:\n                conveyorVelocity = 100\n            elif conveyorVelocity < 20:\n                conveyorVelocity = 20\n            \n            if controller_1.buttonX.pressing() and not conveyorRotatorMotor.position(DEGREES) > 70:\n                conveyorRotatorMotor.set_velocity(40, PERCENT)\n                conveyorRotatorMotor.spin(FORWARD)\n                conveyorRotatorMotorStop = True\n            elif controller_1.buttonB.pressing() and not conveyorRotatorMotor.position(DEGREES) < -10:\n                conveyorRotatorMotor.set_velocity(20, PERCENT)\n                conveyorRotatorMotor.spin(REVERSE)\n                conveyorRotatorMotorStop = True\n            elif (conveyorRotatorMotorStop and conveyorRotatorMotor.is_done()) or conveyorRotatorMotor.position(DEGREES) > 70:\n                conveyorRotatorMotor.stop()\n                brain.screen.clear_screen()\n                brain.screen.print(\"Stopped\")\n                conveyorRotatorMotorStop = False\n            if controller_1.buttonL1.pressing():\n                conveyorMotors.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR1.pressing():\n                conveyorMotors.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                conveyorMotors.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n\n        # wait before repeating the process\n        wait(20, MSEC)\n\n\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","robotConfig":[],"slot":2,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}