
# ------------------------------------------
# 
# 	Project: compRightMoveToGoal
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code


# wait for rotation sensor to fully initialize
wait(30, MSEC)


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration



# Robot configuration code
controller_1 = Controller(PRIMARY)
left_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)
right_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)
drivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 320, 40, MM, 1)
conveyorMotors_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)
conveyorMotors_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
conveyorMotors = MotorGroup(conveyorMotors_motor_a, conveyorMotors_motor_b)
conveyorRotatorMotor = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)
spinnyWheelMotors_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)
spinnyWheelMotors_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)
spinnyWheelMotors = MotorGroup(spinnyWheelMotors_motor_a, spinnyWheelMotors_motor_b)
conveyorRotatorMotor.set_position(0,DEGREES)




# Library imports
from vex import *

def pre_autonomous():
    pass

def autonomous():
    conveyorRotatorMotor.spin_to_position(20,DEGREES)
    drivetrain.drive_for(FORWARD,55,INCHES,wait=True)
    drivetrain.turn_for(RIGHT,110,DEGREES,wait=True)
    conveyorMotors.set_velocity(100,PERCENT)
    conveyorMotors.spin(REVERSE)
    drivetrain.drive_for(REVERSE,10,INCHES,wait=True)
    wait(1,SECONDS)
    conveyorMotors.stop()
    spinnyWheelMotors.stop()
    conveyorRotatorMotor.spin_to_position(60, DEGREES)
    drivetrain.turn_for(LEFT, 220,DEGREES,wait = True)
    left_drive_smart.set_velocity(100,PERCENT)
    right_drive_smart.set_velocity(100,PERCENT)
    drivetrain.drive_for(REVERSE,30,INCHES,wait=True)
    drivetrain.drive_for(FORWARD,5,INCHES,wait=True)
    drivetrain.drive_for(REVERSE,20,INCHES,wait=True)
    drivetrain.drive_for(FORWARD,5,INCHES,wait=True)
    drivetrain.drive_for(REVERSE,20,INCHES,wait=True)
    

conveyorAngle = conveyorRotatorMotor.position(DEGREES)

wheelsSpinning = False;
spinnyWheelMotors.set_velocity(70, PERCENT)
def controller1AButtonPressed():
    global wheelsSpinning
    if wheelsSpinning:
        spinnyWheelMotors.stop()
        conveyorMotors.stop()
        wheelsSpinning = False
    else:
        #spinnyWheelMotors.set_velocity(60, PERCENT)
        conveyorRotatorMotor.spin_to_position(30,DEGREES)
        spinnyWheelMotors.spin(FORWARD)
        wait(1, SECONDS)
        conveyorMotors.spin(FORWARD)
        
        wheelsSpinning = True
inverse = False
def controller_1YButtonPressed():
    global inverse
    inverse = not inverse


# define variables used for controlling motors based on controller inputs
controller_1_left_shoulder_control_motors_stopped = True
controller_1_right_shoulder_control_motors_stopped = True
drivetrain_l_needs_to_be_stopped_controller_1 = False
drivetrain_r_needs_to_be_stopped_controller_1 = False
movingDown = True
rotatorMotorMovingDown = False
conveyorRotatorMotorStop = False
conveyorVelocity = 75
# define a task that will handle monitoring inputs from controller_1
def user_control():
    # define variable for remote controller enable/disable
    remote_control_code_enabled = True  
    drivetrain.stop()
    controller_1.buttonY.pressed(controller_1YButtonPressed)
    controller_1.buttonA.pressed(controller1AButtonPressed)
    conveyorRotatorMotor.set_velocity(40, PERCENT)
    conveyorRotatorMotor.set_stopping(HOLD)
    global drivetrain_l_needs_to_be_stopped_controller_1 
    global drivetrain_r_needs_to_be_stopped_controller_1
    global controller_1_left_shoulder_control_motors_stopped
    global controller_1_right_shoulder_control_motors_stopped
    global conveyorVelocity, conveyorAngle, conveyorRotatorMotorStop, rotatorMotorMovingDown, inverse
    conveyorMotors.set_velocity(conveyorVelocity, PERCENT)
    conveyorRotatorMotor.spin_to_position(20, DEGREES)
    conveyorMotors.stop()
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axis3 + axis1
            # right = axis3 - axis1
            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis1.position()
            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis1.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller_1:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller_1 = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller_1:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller_1 = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller_1 = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller_1:
                if inverse:
                    drivetrain_left_side_speed = -drivetrain_left_side_speed
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                if not inverse:
                    left_drive_smart.spin(FORWARD)
                else:
                    left_drive_smart.spin(REVERSE)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller_1:
                if inverse:
                    drivetrain_right_side_speed = -drivetrain_right_side_speed
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                if not inverse:
                    right_drive_smart.spin(FORWARD)
                else:
                    right_drive_smart.spin(REVERSE)
            # check the buttonL1/buttonL2 status
            # to control conveyorMotors

            if controller_1.buttonL2.pressing():
                conveyorVelocity -= 1
                conveyorMotors.set_velocity(conveyorVelocity, PERCENT)
            elif controller_1.buttonR2.pressing():
                conveyorVelocity += 1
                conveyorMotors.set_velocity(conveyorVelocity, PERCENT)
            if conveyorVelocity > 100:
                conveyorVelocity = 100
            elif conveyorVelocity < 20:
                conveyorVelocity = 20
            
            if controller_1.buttonX.pressing() and not conveyorRotatorMotor.position(DEGREES) > 70:
                conveyorRotatorMotor.set_velocity(40, PERCENT)
                conveyorRotatorMotor.spin(FORWARD)
                conveyorRotatorMotorStop = True
            elif controller_1.buttonB.pressing() and not conveyorRotatorMotor.position(DEGREES) < -10:
                conveyorRotatorMotor.set_velocity(20, PERCENT)
                conveyorRotatorMotor.spin(REVERSE)
                conveyorRotatorMotorStop = True
            elif (conveyorRotatorMotorStop and conveyorRotatorMotor.is_done()) or conveyorRotatorMotor.position(DEGREES) > 70:
                conveyorRotatorMotor.stop()
                brain.screen.clear_screen()
                brain.screen.print("Stopped")
                conveyorRotatorMotorStop = False
            if controller_1.buttonL1.pressing():
                conveyorMotors.spin(REVERSE)
                controller_1_left_shoulder_control_motors_stopped = False
            elif controller_1.buttonR1.pressing():
                conveyorMotors.spin(FORWARD)
                controller_1_left_shoulder_control_motors_stopped = False
            elif not controller_1_left_shoulder_control_motors_stopped:
                conveyorMotors.stop()
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_1_left_shoulder_control_motors_stopped = True
            # check the buttonR1/buttonR2 status
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_1_right_shoulder_control_motors_stopped = True

        # wait before repeating the process
        wait(20, MSEC)
